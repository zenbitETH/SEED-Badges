{
  "address": "0xe30de379eD0D0e7a6eE511317c5106adb130CeE2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_attestation",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_studentAddress",
          "type": "address"
        }
      ],
      "name": "addAttestation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_newMentors",
          "type": "address[]"
        }
      ],
      "name": "addMentors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "attestationProfile",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "studentLevel",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_closingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_eventName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_mentorName",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "typeOf",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "attendeeCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "eventName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "eventDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mentorName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "mentorAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "overrideClosingTimestamp",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllEvents",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "typeOf",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "attendeeCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "eventName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "eventDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "mentorName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "mentorAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "attendees",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "overrideClosingTimestamp",
              "type": "bool"
            }
          ],
          "internalType": "struct Structs.Event[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_msgHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "getAttested",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_studentAddress",
          "type": "address"
        }
      ],
      "name": "getEventsCompleted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_studentLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "studentEventMap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "attestation",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "eventName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "eventDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mentorName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "mentorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_res",
          "type": "bool"
        }
      ],
      "name": "toggleOverrideEventFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ee7e95cf64eb9727098b7cfbdeaa9d1363a2b8fbae2ad3495a01f70f56df626",
  "receipt": {
    "to": null,
    "from": "0xbd53471abf1C3827b8EeEF4898fcfe76821a3C2B",
    "contractAddress": "0xe30de379eD0D0e7a6eE511317c5106adb130CeE2",
    "transactionIndex": 4,
    "gasUsed": "1724516",
    "logsBloom": "0x
    "blockHash": "0x7f8d2e2cdb64b9340b43e12c69ecdd2bc53402d403a94f95237e572dfeffffaf",
    "transactionHash": "0x2ee7e95cf64eb9727098b7cfbdeaa9d1363a2b8fbae2ad3495a01f70f56df626",
    "logs": [],
    "blockNumber": 8734501,
    "cumulativeGasUsed": "1933172",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6113d4dee8dfda1aaddb2b4e6dc6fb14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_attestation\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_studentAddress\",\"type\":\"address\"}],\"name\":\"addAttestation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newMentors\",\"type\":\"address[]\"}],\"name\":\"addMentors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"attestationProfile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"studentLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_closingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mentorName\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"typeOf\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attendeeCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eventDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mentorName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"mentorAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideClosingTimestamp\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEvents\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"typeOf\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attendeeCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eventDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mentorName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"mentorAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"attendees\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideClosingTimestamp\",\"type\":\"bool\"}],\"internalType\":\"struct Structs.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getAttested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_studentAddress\",\"type\":\"address\"}],\"name\":\"getEventsCompleted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_studentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"studentEventMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eventDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mentorName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"mentorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_res\",\"type\":\"bool\"}],\"name\":\"toggleOverrideEventFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EASOnboarding.sol\":\"EASOnboarding\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/EASOnboarding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./lib/Structs.sol\\\";\\nimport \\\"./storage/EASOnboardingStorage.sol\\\";\\n\\ncontract EASOnboarding is EASOnboardingStorage {\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier isMentorAddress(address _mentorAddress) {\\n        require(\\n            isMentor[_mentorAddress] || _mentorAddress == deployer, \\\"Only selected mentor addresses can create quiz\\\"\\n        );\\n        _;\\n    }\\n\\n    function getAttested(uint256 _eventId, uint256 _level, bytes32 _msgHash, bytes memory _signature)\\n        public\\n        returns (bool)\\n    {\\n        // This should take care of failed attempt to getAttested\\n        require(\\n            studentEventMap[msg.sender][_eventId].attestation == bytes32(0), \\\"Student already attested for this event\\\"\\n        );\\n        require(isVerified(_msgHash, _signature), \\\"Invalid Txn Source\\\");\\n        require(events[_eventId].isActive || !events[_eventId].overrideClosingTimestamp, \\\"Event is no longer active\\\");\\n        require(\\n            (events[_eventId].closingTimestamp > block.timestamp) || !events[_eventId].overrideClosingTimestamp,\\n            \\\"Event is past closing timestamp\\\"\\n        );\\n\\n        events[_eventId].attendees.push(msg.sender);\\n        attestationProfile[msg.sender].eventsCompleted.push(_eventId);\\n        attestationProfile[msg.sender].studentLevel = _level;\\n        studentEventMap[msg.sender][_eventId].eventId = _eventId;\\n        studentEventMap[msg.sender][_eventId].eventName = events[_eventId].eventName;\\n        studentEventMap[msg.sender][_eventId].eventDescription = events[_eventId].eventDescription;\\n        studentEventMap[msg.sender][_eventId].mentorName = events[_eventId].mentorName;\\n        studentEventMap[msg.sender][_eventId].mentorAddress = events[_eventId].mentorAddress;\\n        studentEventMap[msg.sender][_eventId].level = _level;\\n        return true;\\n    }\\n\\n    function addAttestation(bytes32 _attestation, address _studentAddress) public {\\n        require(msg.sender == deployer);\\n        attestationProfile[_studentAddress].attestations.push(_attestation);\\n    }\\n\\n    function toggleOverrideEventFlag(uint256 _eventId, bool _res) public isMentorAddress(msg.sender) {\\n        events[_eventId].overrideClosingTimestamp = _res;\\n    }\\n\\n    function createEvent(\\n        uint256 _closingTimestamp,\\n        uint256 _level,\\n        uint8 _type,\\n        string memory _eventName,\\n        string memory _eventDescription,\\n        string memory _mentorName\\n    ) public isMentorAddress(msg.sender) {\\n        require(_closingTimestamp > block.timestamp, \\\"Closing timestamp cannot be in the past.\\\");\\n\\n        events[eventIdCounter].typeOf = _type;\\n        events[eventIdCounter].eventId = eventIdCounter;\\n        events[eventIdCounter].level = _level;\\n        events[eventIdCounter].closingTimestamp = _closingTimestamp;\\n        events[eventIdCounter].attendeeCount = 1;\\n        events[eventIdCounter].eventName = _eventName;\\n        events[eventIdCounter].eventDescription = _eventDescription;\\n        events[eventIdCounter].mentorName = _mentorName;\\n        events[eventIdCounter].mentorAddress = msg.sender;\\n        events[eventIdCounter].attendees.push(msg.sender);\\n        events[eventIdCounter].isActive = true;\\n        events[eventIdCounter].overrideClosingTimestamp = false;\\n        eventIdCounter++;\\n    }\\n\\n    function isVerified(bytes32 _messageHash, bytes memory _signature) public view returns (bool) {\\n        // The ethSignedMessageHash is the hash that the signer actually signed\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(_messageHash);\\n\\n        // Recover the signer's address from the signature\\n        address signer = recoverSigner(ethSignedMessageHash, _signature);\\n\\n        require(signer == deployer, \\\"Unauthorized Contract call\\\");\\n\\n        return true;\\n    }\\n\\n    function addMentors(address[] memory _newMentors) public isMentorAddress(msg.sender) {\\n        for (uint256 i = 0; i < _newMentors.length; i++) {\\n            isMentor[_newMentors[i]] = true;\\n        }\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) public pure returns (address) {\\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) public pure returns (uint8, bytes32, bytes32) {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n        return (v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x65ff24dbf485dd320903b39826c36ec25cf5cef354109c487d56490e337676ed\",\"license\":\"MIT\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Structs {\\n    struct Event {\\n        uint8 typeOf;\\n        uint256 eventId;\\n        uint256 level;\\n        uint256 closingTimestamp;\\n        uint256 attendeeCount;\\n        string eventName;\\n        string eventDescription;\\n        string mentorName;\\n        address mentorAddress;\\n        address[] attendees;\\n        bool isActive;\\n        bool overrideClosingTimestamp;\\n    }\\n\\n    struct AttestationProfile {\\n        uint256 studentLevel;\\n        uint256[] eventsCompleted;\\n        bytes32[] attestations;\\n    }\\n\\n    struct metaEvent {\\n        bytes32 attestation;\\n        uint256 eventId;\\n        uint256 level;\\n        string eventName;\\n        string eventDescription;\\n        string mentorName;\\n        address mentorAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x24fdc5bfb083b0a355842766e53862f8576f4768e87a478d3c80a9d6b0be34ad\",\"license\":\"MIT\"},\"contracts/storage/EASOnboardingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../lib/Structs.sol\\\";\\n\\ncontract EASOnboardingStorage {\\n    address deployer;\\n\\n    mapping(address => Structs.AttestationProfile) public attestationProfile;\\n    mapping(address => mapping(uint256 => Structs.metaEvent)) public studentEventMap;\\n    mapping(uint256 => Structs.Event) public events;\\n    mapping(address => bool) isMentor;\\n    uint256 public eventIdCounter = 1;\\n\\n    function getAllEvents() public view returns (Structs.Event[] memory) {\\n        Structs.Event[] memory eventsArray = new Structs.Event[](eventIdCounter - 1);\\n        for (uint256 i = 1; i < eventIdCounter; i++) {\\n            eventsArray[i - 1] = events[i];\\n        }\\n        return eventsArray;\\n    }\\n    // Function to get eventsCompleted\\n\\n    function getEventsCompleted(address _studentAddress)\\n        public\\n        view\\n        returns (uint256 _studentLevel, uint256[] memory, bytes32[] memory)\\n    {\\n        return (\\n            attestationProfile[_studentAddress].studentLevel,\\n            attestationProfile[_studentAddress].eventsCompleted,\\n            attestationProfile[_studentAddress].attestations\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe8e3b9dd083f4873b7cc94108395f9f6bf647514b8cf9848d639fac488622ee1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160055534801561001557600080fd5b50600080546001600160a01b03191633179055611d6c806100376000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806397aba7f911610097578063c3816c1311610066578063c3816c1314610273578063e01a0ebe14610286578063fa5408011461028f578063fed6bf28146102a257600080fd5b806397aba7f9146101ee578063a264efce14610219578063a7bb58031461022c578063c27a500d1461025e57600080fd5b80635c78442c116100d35780635c78442c146101555780636dff91311461017b5780637fcacc0e146101a957806391ea6364146101cc57600080fd5b80630b791430146100fa578063246115c21461012d57806358586bad14610142575b600080fd5b61010d61010836600461135d565b6102b5565b6040516101249b9a999897969594939291906113bc565b60405180910390f35b61014061013b366004611467565b6104b9565b005b61014061015036600461154a565b6104fc565b6101686101633660046115fd565b6106e5565b6040516101249796959493929190611627565b61019b61018936600461168f565b60016020526000908152604090205481565b604051908152602001610124565b6101bc6101b73660046116b1565b6108cb565b6040519015158152602001610124565b6101df6101da36600461168f565b610952565b604051610124939291906116f8565b6102016101fc3660046116b1565b610a28565b6040516001600160a01b039091168152602001610124565b61014061022736600461177e565b610aa7565b61023f61023a3660046117b3565b610b19565b6040805160ff9094168452602084019290925290820152606001610124565b610266610b8b565b6040516101249190611834565b6101bc61028136600461196c565b610f49565b61019b60055481565b61019b61029d36600461135d565b611256565b6101406102b03660046119c6565b6112a9565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501805460ff9095169693959394929391926102f890611a73565b80601f016020809104026020016040519081016040528092919081815260200182805461032490611a73565b80156103715780601f1061034657610100808354040283529160200191610371565b820191906000526020600020905b81548152906001019060200180831161035457829003601f168201915b50505050509080600601805461038690611a73565b80601f01602080910402602001604051908101604052809291908181526020018280546103b290611a73565b80156103ff5780601f106103d4576101008083540402835291602001916103ff565b820191906000526020600020905b8154815290600101906020018083116103e257829003601f168201915b50505050509080600701805461041490611a73565b80601f016020809104026020016040519081016040528092919081815260200182805461044090611a73565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b505050506008830154600a9093015491926001600160a01b03169160ff8082169250610100909104168b565b6000546001600160a01b031633146104d057600080fd5b6001600160a01b0316600090815260016020818152604083206002018054928301815583529091200155565b3360008181526004602052604090205460ff168061052757506000546001600160a01b038281169116145b61054c5760405162461bcd60e51b815260040161054390611aa7565b60405180910390fd5b4287116105ac5760405162461bcd60e51b815260206004820152602860248201527f436c6f73696e672074696d657374616d702063616e6e6f7420626520696e20746044820152673432903830b9ba1760c11b6064820152608401610543565b600580546000908152600360208190526040808320805460ff191660ff8b1617905583548084528184206001818101929092556002018b9055845484528184209092018b90558354835280832060040191909155825482529020016106118582611b43565b5060055460009081526003602052604090206006016106308482611b43565b50600554600090815260036020526040902060070161064f8382611b43565b506005805460009081526003602090815260408083206008018054336001600160a01b03199182168117909255855485528285206009018054600181810183559187529486209094018054909116909117905583548352808320600a908101805460ff191690931790925583548352822001805461ff0019169055815491906106d783611c19565b919050555050505050505050565b600260208181526000938452604080852090915291835291208054600182015492820154600383018054929493919261071d90611a73565b80601f016020809104026020016040519081016040528092919081815260200182805461074990611a73565b80156107965780601f1061076b57610100808354040283529160200191610796565b820191906000526020600020905b81548152906001019060200180831161077957829003601f168201915b5050505050908060040180546107ab90611a73565b80601f01602080910402602001604051908101604052809291908181526020018280546107d790611a73565b80156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b50505050509080600501805461083990611a73565b80601f016020809104026020016040519081016040528092919081815260200182805461086590611a73565b80156108b25780601f10610887576101008083540402835291602001916108b2565b820191906000526020600020905b81548152906001019060200180831161089557829003601f168201915b505050600690930154919250506001600160a01b031687565b6000806108d784611256565b905060006108e58285610a28565b6000549091506001600160a01b038083169116146109455760405162461bcd60e51b815260206004820152601a60248201527f556e617574686f72697a656420436f6e74726163742063616c6c0000000000006044820152606401610543565b6001925050505b92915050565b6001600160a01b038116600090815260016020818152604080842080549381018054835181860281018601909452808452606095869590949293600201929184918301828280156109c257602002820191906000526020600020905b8154815260200190600101908083116109ae575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610a1457602002820191906000526020600020905b815481526020019060010190808311610a00575b505050505090509250925092509193909250565b600080600080610a3785610b19565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610a92573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b3360008181526004602052604090205460ff1680610ad257506000546001600160a01b038281169116145b610aee5760405162461bcd60e51b815260040161054390611aa7565b50600091825260036020526040909120600a0180549115156101000261ff0019909216919091179055565b60008060008351604114610b6f5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610543565b5050506020810151604082015160609092015160001a92909190565b606060006001600554610b9e9190611c32565b67ffffffffffffffff811115610bb657610bb6611493565b604051908082528060200260200182016040528015610c5b57816020015b610c48604051806101800160405280600060ff1681526020016000815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160006001600160a01b03168152602001606081526020016000151581526020016000151581525090565b815260200190600190039081610bd45790505b50905060015b600554811015610f4357600081815260036020818152604092839020835161018081018552815460ff1681526001820154928101929092526002810154938201939093529082015460608201526004820154608082015260058201805491929160a084019190610cd090611a73565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfc90611a73565b8015610d495780601f10610d1e57610100808354040283529160200191610d49565b820191906000526020600020905b815481529060010190602001808311610d2c57829003601f168201915b50505050508152602001600682018054610d6290611a73565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8e90611a73565b8015610ddb5780601f10610db057610100808354040283529160200191610ddb565b820191906000526020600020905b815481529060010190602001808311610dbe57829003601f168201915b50505050508152602001600782018054610df490611a73565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2090611a73565b8015610e6d5780601f10610e4257610100808354040283529160200191610e6d565b820191906000526020600020905b815481529060010190602001808311610e5057829003601f168201915b505050918352505060088201546001600160a01b03166020808301919091526009830180546040805182850281018501825282815294019392830182828015610edf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ec1575b5050509183525050600a919091015460ff8082161515602084015261010090910416151560409091015282610f15600184611c32565b81518110610f2557610f25611c45565b60200260200101819052508080610f3b90611c19565b915050610c61565b50919050565b33600090815260026020908152604080832087845290915281205415610fc15760405162461bcd60e51b815260206004820152602760248201527f53747564656e7420616c726561647920617474657374656420666f72207468696044820152661cc8195d995b9d60ca1b6064820152608401610543565b610fcb83836108cb565b61100c5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b6044820152606401610543565b6000858152600360205260409020600a015460ff168061104357506000858152600360205260409020600a0154610100900460ff16155b61108f5760405162461bcd60e51b815260206004820152601960248201527f4576656e74206973206e6f206c6f6e67657220616374697665000000000000006044820152606401610543565b600085815260036020819052604090912001544210806110c657506000858152600360205260409020600a0154610100900460ff16155b6111125760405162461bcd60e51b815260206004820152601f60248201527f4576656e74206973207061737420636c6f73696e672074696d657374616d70006044820152606401610543565b6000858152600360208181526040808420600981018054600180820183559187528487200180546001600160a01b0319163390811790915580875281855283872080830180548085018255908952868920018d90559087528a9055600284528286208b8752909352932090810188905501906111919060050182611c5b565b50600085815260036020908152604080832033845260028352818420898552909252909120600401906111c79060060182611c5b565b50600085815260036020908152604080832033845260028352818420898552909252909120600501906111fd9060070182611c5b565b5050506000838152600360209081526040808320600801543384526002808452828520978552969092529091206006810180546001600160a01b0319166001600160a01b03909316929092179091559092015550600190565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b3360008181526004602052604090205460ff16806112d457506000546001600160a01b038281169116145b6112f05760405162461bcd60e51b815260040161054390611aa7565b60005b82518110156113585760016004600085848151811061131457611314611c45565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061135081611c19565b9150506112f3565b505050565b60006020828403121561136f57600080fd5b5035919050565b6000815180845260005b8181101561139c57602081850181015186830182015201611380565b506000602082860101526020601f19601f83011685010191505092915050565b600061016060ff8e1683528c60208401528b60408401528a60608401528960808401528060a08401526113f18184018a611376565b905082810360c08401526114058189611376565b905082810360e08401526114198188611376565b6001600160a01b0396909616610100840152505091151561012083015215156101409091015298975050505050505050565b80356001600160a01b038116811461146257600080fd5b919050565b6000806040838503121561147a57600080fd5b8235915061148a6020840161144b565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114d2576114d2611493565b604052919050565b600082601f8301126114eb57600080fd5b813567ffffffffffffffff81111561150557611505611493565b611518601f8201601f19166020016114a9565b81815284602083860101111561152d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561156357600080fd5b8635955060208701359450604087013560ff8116811461158257600080fd5b9350606087013567ffffffffffffffff8082111561159f57600080fd5b6115ab8a838b016114da565b945060808901359150808211156115c157600080fd5b6115cd8a838b016114da565b935060a08901359150808211156115e357600080fd5b506115f089828a016114da565b9150509295509295509295565b6000806040838503121561161057600080fd5b6116198361144b565b946020939093013593505050565b87815286602082015285604082015260e06060820152600061164c60e0830187611376565b828103608084015261165e8187611376565b905082810360a08401526116728186611376565b91505060018060a01b03831660c083015298975050505050505050565b6000602082840312156116a157600080fd5b6116aa8261144b565b9392505050565b600080604083850312156116c457600080fd5b82359150602083013567ffffffffffffffff8111156116e257600080fd5b6116ee858286016114da565b9150509250929050565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156117395784518352938301939183019160010161171d565b50508481036040860152855180825290820192508186019060005b8181101561177057825185529383019391830191600101611754565b509298975050505050505050565b6000806040838503121561179157600080fd5b82359150602083013580151581146117a857600080fd5b809150509250929050565b6000602082840312156117c557600080fd5b813567ffffffffffffffff8111156117dc57600080fd5b6117e8848285016114da565b949350505050565b600081518084526020808501945080840160005b838110156118295781516001600160a01b031687529582019590820190600101611804565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561195e57888303603f190185528151805160ff16845261018081890151858a01528782015188860152606080830151908601526080808301519086015260a0808301518187018390526118b483880182611376565b9250505060c080830151868303828801526118cf8382611376565b9250505060e080830151868303828801526118ea8382611376565b9250505061010080830151611909828801826001600160a01b03169052565b5050610120808301518683038288015261192383826117f0565b925050506101408083015161193b8288018215159052565b50506101609182015115159490910193909352938601939086019060010161185b565b509098975050505050505050565b6000806000806080858703121561198257600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156119ae57600080fd5b6119ba878288016114da565b91505092959194509250565b600060208083850312156119d957600080fd5b823567ffffffffffffffff808211156119f157600080fd5b818501915085601f830112611a0557600080fd5b813581811115611a1757611a17611493565b8060051b9150611a288483016114a9565b8181529183018401918481019088841115611a4257600080fd5b938501935b83851015611a6757611a588561144b565b82529385019390850190611a47565b98975050505050505050565b600181811c90821680611a8757607f821691505b602082108103610f4357634e487b7160e01b600052602260045260246000fd5b6020808252602e908201527f4f6e6c792073656c6563746564206d656e746f7220616464726573736573206360408201526d30b71031b932b0ba329038bab4bd60911b606082015260800190565b601f82111561135857600081815260208120601f850160051c81016020861015611b1c5750805b601f850160051c820191505b81811015611b3b57828155600101611b28565b505050505050565b815167ffffffffffffffff811115611b5d57611b5d611493565b611b7181611b6b8454611a73565b84611af5565b602080601f831160018114611ba65760008415611b8e5750858301515b600019600386901b1c1916600185901b178555611b3b565b600085815260208120601f198616915b82811015611bd557888601518255948401946001909101908401611bb6565b5085821015611bf35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201611c2b57611c2b611c03565b5060010190565b8181038181111561094c5761094c611c03565b634e487b7160e01b600052603260045260246000fd5b818103611c66575050565b611c708254611a73565b67ffffffffffffffff811115611c8857611c88611493565b611c9681611b6b8454611a73565b6000601f821160018114611cca5760008315611cb25750848201545b600019600385901b1c1916600184901b178455611d2f565b600085815260209020601f19841690600086815260209020845b83811015611d045782860154825560019586019590910190602001611ce4565b5085831015611d225781850154600019600388901b60f8161c191681555b50505060018360011b0184555b505050505056fea2646970667358221220bb95127b0331575aca67363e4d1f1ddfbe2f123471ee9f6cac55e000575d583b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806397aba7f911610097578063c3816c1311610066578063c3816c1314610273578063e01a0ebe14610286578063fa5408011461028f578063fed6bf28146102a257600080fd5b806397aba7f9146101ee578063a264efce14610219578063a7bb58031461022c578063c27a500d1461025e57600080fd5b80635c78442c116100d35780635c78442c146101555780636dff91311461017b5780637fcacc0e146101a957806391ea6364146101cc57600080fd5b80630b791430146100fa578063246115c21461012d57806358586bad14610142575b600080fd5b61010d61010836600461135d565b6102b5565b6040516101249b9a999897969594939291906113bc565b60405180910390f35b61014061013b366004611467565b6104b9565b005b61014061015036600461154a565b6104fc565b6101686101633660046115fd565b6106e5565b6040516101249796959493929190611627565b61019b61018936600461168f565b60016020526000908152604090205481565b604051908152602001610124565b6101bc6101b73660046116b1565b6108cb565b6040519015158152602001610124565b6101df6101da36600461168f565b610952565b604051610124939291906116f8565b6102016101fc3660046116b1565b610a28565b6040516001600160a01b039091168152602001610124565b61014061022736600461177e565b610aa7565b61023f61023a3660046117b3565b610b19565b6040805160ff9094168452602084019290925290820152606001610124565b610266610b8b565b6040516101249190611834565b6101bc61028136600461196c565b610f49565b61019b60055481565b61019b61029d36600461135d565b611256565b6101406102b03660046119c6565b6112a9565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501805460ff9095169693959394929391926102f890611a73565b80601f016020809104026020016040519081016040528092919081815260200182805461032490611a73565b80156103715780601f1061034657610100808354040283529160200191610371565b820191906000526020600020905b81548152906001019060200180831161035457829003601f168201915b50505050509080600601805461038690611a73565b80601f01602080910402602001604051908101604052809291908181526020018280546103b290611a73565b80156103ff5780601f106103d4576101008083540402835291602001916103ff565b820191906000526020600020905b8154815290600101906020018083116103e257829003601f168201915b50505050509080600701805461041490611a73565b80601f016020809104026020016040519081016040528092919081815260200182805461044090611a73565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b505050506008830154600a9093015491926001600160a01b03169160ff8082169250610100909104168b565b6000546001600160a01b031633146104d057600080fd5b6001600160a01b0316600090815260016020818152604083206002018054928301815583529091200155565b3360008181526004602052604090205460ff168061052757506000546001600160a01b038281169116145b61054c5760405162461bcd60e51b815260040161054390611aa7565b60405180910390fd5b4287116105ac5760405162461bcd60e51b815260206004820152602860248201527f436c6f73696e672074696d657374616d702063616e6e6f7420626520696e20746044820152673432903830b9ba1760c11b6064820152608401610543565b600580546000908152600360208190526040808320805460ff191660ff8b1617905583548084528184206001818101929092556002018b9055845484528184209092018b90558354835280832060040191909155825482529020016106118582611b43565b5060055460009081526003602052604090206006016106308482611b43565b50600554600090815260036020526040902060070161064f8382611b43565b506005805460009081526003602090815260408083206008018054336001600160a01b03199182168117909255855485528285206009018054600181810183559187529486209094018054909116909117905583548352808320600a908101805460ff191690931790925583548352822001805461ff0019169055815491906106d783611c19565b919050555050505050505050565b600260208181526000938452604080852090915291835291208054600182015492820154600383018054929493919261071d90611a73565b80601f016020809104026020016040519081016040528092919081815260200182805461074990611a73565b80156107965780601f1061076b57610100808354040283529160200191610796565b820191906000526020600020905b81548152906001019060200180831161077957829003601f168201915b5050505050908060040180546107ab90611a73565b80601f01602080910402602001604051908101604052809291908181526020018280546107d790611a73565b80156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b50505050509080600501805461083990611a73565b80601f016020809104026020016040519081016040528092919081815260200182805461086590611a73565b80156108b25780601f10610887576101008083540402835291602001916108b2565b820191906000526020600020905b81548152906001019060200180831161089557829003601f168201915b505050600690930154919250506001600160a01b031687565b6000806108d784611256565b905060006108e58285610a28565b6000549091506001600160a01b038083169116146109455760405162461bcd60e51b815260206004820152601a60248201527f556e617574686f72697a656420436f6e74726163742063616c6c0000000000006044820152606401610543565b6001925050505b92915050565b6001600160a01b038116600090815260016020818152604080842080549381018054835181860281018601909452808452606095869590949293600201929184918301828280156109c257602002820191906000526020600020905b8154815260200190600101908083116109ae575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610a1457602002820191906000526020600020905b815481526020019060010190808311610a00575b505050505090509250925092509193909250565b600080600080610a3785610b19565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610a92573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b3360008181526004602052604090205460ff1680610ad257506000546001600160a01b038281169116145b610aee5760405162461bcd60e51b815260040161054390611aa7565b50600091825260036020526040909120600a0180549115156101000261ff0019909216919091179055565b60008060008351604114610b6f5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610543565b5050506020810151604082015160609092015160001a92909190565b606060006001600554610b9e9190611c32565b67ffffffffffffffff811115610bb657610bb6611493565b604051908082528060200260200182016040528015610c5b57816020015b610c48604051806101800160405280600060ff1681526020016000815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160006001600160a01b03168152602001606081526020016000151581526020016000151581525090565b815260200190600190039081610bd45790505b50905060015b600554811015610f4357600081815260036020818152604092839020835161018081018552815460ff1681526001820154928101929092526002810154938201939093529082015460608201526004820154608082015260058201805491929160a084019190610cd090611a73565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfc90611a73565b8015610d495780601f10610d1e57610100808354040283529160200191610d49565b820191906000526020600020905b815481529060010190602001808311610d2c57829003601f168201915b50505050508152602001600682018054610d6290611a73565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8e90611a73565b8015610ddb5780601f10610db057610100808354040283529160200191610ddb565b820191906000526020600020905b815481529060010190602001808311610dbe57829003601f168201915b50505050508152602001600782018054610df490611a73565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2090611a73565b8015610e6d5780601f10610e4257610100808354040283529160200191610e6d565b820191906000526020600020905b815481529060010190602001808311610e5057829003601f168201915b505050918352505060088201546001600160a01b03166020808301919091526009830180546040805182850281018501825282815294019392830182828015610edf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ec1575b5050509183525050600a919091015460ff8082161515602084015261010090910416151560409091015282610f15600184611c32565b81518110610f2557610f25611c45565b60200260200101819052508080610f3b90611c19565b915050610c61565b50919050565b33600090815260026020908152604080832087845290915281205415610fc15760405162461bcd60e51b815260206004820152602760248201527f53747564656e7420616c726561647920617474657374656420666f72207468696044820152661cc8195d995b9d60ca1b6064820152608401610543565b610fcb83836108cb565b61100c5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b6044820152606401610543565b6000858152600360205260409020600a015460ff168061104357506000858152600360205260409020600a0154610100900460ff16155b61108f5760405162461bcd60e51b815260206004820152601960248201527f4576656e74206973206e6f206c6f6e67657220616374697665000000000000006044820152606401610543565b600085815260036020819052604090912001544210806110c657506000858152600360205260409020600a0154610100900460ff16155b6111125760405162461bcd60e51b815260206004820152601f60248201527f4576656e74206973207061737420636c6f73696e672074696d657374616d70006044820152606401610543565b6000858152600360208181526040808420600981018054600180820183559187528487200180546001600160a01b0319163390811790915580875281855283872080830180548085018255908952868920018d90559087528a9055600284528286208b8752909352932090810188905501906111919060050182611c5b565b50600085815260036020908152604080832033845260028352818420898552909252909120600401906111c79060060182611c5b565b50600085815260036020908152604080832033845260028352818420898552909252909120600501906111fd9060070182611c5b565b5050506000838152600360209081526040808320600801543384526002808452828520978552969092529091206006810180546001600160a01b0319166001600160a01b03909316929092179091559092015550600190565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b3360008181526004602052604090205460ff16806112d457506000546001600160a01b038281169116145b6112f05760405162461bcd60e51b815260040161054390611aa7565b60005b82518110156113585760016004600085848151811061131457611314611c45565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061135081611c19565b9150506112f3565b505050565b60006020828403121561136f57600080fd5b5035919050565b6000815180845260005b8181101561139c57602081850181015186830182015201611380565b506000602082860101526020601f19601f83011685010191505092915050565b600061016060ff8e1683528c60208401528b60408401528a60608401528960808401528060a08401526113f18184018a611376565b905082810360c08401526114058189611376565b905082810360e08401526114198188611376565b6001600160a01b0396909616610100840152505091151561012083015215156101409091015298975050505050505050565b80356001600160a01b038116811461146257600080fd5b919050565b6000806040838503121561147a57600080fd5b8235915061148a6020840161144b565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114d2576114d2611493565b604052919050565b600082601f8301126114eb57600080fd5b813567ffffffffffffffff81111561150557611505611493565b611518601f8201601f19166020016114a9565b81815284602083860101111561152d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561156357600080fd5b8635955060208701359450604087013560ff8116811461158257600080fd5b9350606087013567ffffffffffffffff8082111561159f57600080fd5b6115ab8a838b016114da565b945060808901359150808211156115c157600080fd5b6115cd8a838b016114da565b935060a08901359150808211156115e357600080fd5b506115f089828a016114da565b9150509295509295509295565b6000806040838503121561161057600080fd5b6116198361144b565b946020939093013593505050565b87815286602082015285604082015260e06060820152600061164c60e0830187611376565b828103608084015261165e8187611376565b905082810360a08401526116728186611376565b91505060018060a01b03831660c083015298975050505050505050565b6000602082840312156116a157600080fd5b6116aa8261144b565b9392505050565b600080604083850312156116c457600080fd5b82359150602083013567ffffffffffffffff8111156116e257600080fd5b6116ee858286016114da565b9150509250929050565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156117395784518352938301939183019160010161171d565b50508481036040860152855180825290820192508186019060005b8181101561177057825185529383019391830191600101611754565b509298975050505050505050565b6000806040838503121561179157600080fd5b82359150602083013580151581146117a857600080fd5b809150509250929050565b6000602082840312156117c557600080fd5b813567ffffffffffffffff8111156117dc57600080fd5b6117e8848285016114da565b949350505050565b600081518084526020808501945080840160005b838110156118295781516001600160a01b031687529582019590820190600101611804565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561195e57888303603f190185528151805160ff16845261018081890151858a01528782015188860152606080830151908601526080808301519086015260a0808301518187018390526118b483880182611376565b9250505060c080830151868303828801526118cf8382611376565b9250505060e080830151868303828801526118ea8382611376565b9250505061010080830151611909828801826001600160a01b03169052565b5050610120808301518683038288015261192383826117f0565b925050506101408083015161193b8288018215159052565b50506101609182015115159490910193909352938601939086019060010161185b565b509098975050505050505050565b6000806000806080858703121561198257600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156119ae57600080fd5b6119ba878288016114da565b91505092959194509250565b600060208083850312156119d957600080fd5b823567ffffffffffffffff808211156119f157600080fd5b818501915085601f830112611a0557600080fd5b813581811115611a1757611a17611493565b8060051b9150611a288483016114a9565b8181529183018401918481019088841115611a4257600080fd5b938501935b83851015611a6757611a588561144b565b82529385019390850190611a47565b98975050505050505050565b600181811c90821680611a8757607f821691505b602082108103610f4357634e487b7160e01b600052602260045260246000fd5b6020808252602e908201527f4f6e6c792073656c6563746564206d656e746f7220616464726573736573206360408201526d30b71031b932b0ba329038bab4bd60911b606082015260800190565b601f82111561135857600081815260208120601f850160051c81016020861015611b1c5750805b601f850160051c820191505b81811015611b3b57828155600101611b28565b505050505050565b815167ffffffffffffffff811115611b5d57611b5d611493565b611b7181611b6b8454611a73565b84611af5565b602080601f831160018114611ba65760008415611b8e5750858301515b600019600386901b1c1916600185901b178555611b3b565b600085815260208120601f198616915b82811015611bd557888601518255948401946001909101908401611bb6565b5085821015611bf35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201611c2b57611c2b611c03565b5060010190565b8181038181111561094c5761094c611c03565b634e487b7160e01b600052603260045260246000fd5b818103611c66575050565b611c708254611a73565b67ffffffffffffffff811115611c8857611c88611493565b611c9681611b6b8454611a73565b6000601f821160018114611cca5760008315611cb25750848201545b600019600385901b1c1916600184901b178455611d2f565b600085815260209020601f19841690600086815260209020845b83811015611d045782860154825560019586019590910190602001611ce4565b5085831015611d225781850154600019600388901b60f8161c191681555b50505060018360011b0184555b505050505056fea2646970667358221220bb95127b0331575aca67363e4d1f1ddfbe2f123471ee9f6cac55e000575d583b64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2352,
        "contract": "contracts/EASOnboarding.sol:EASOnboarding",
        "label": "deployer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2357,
        "contract": "contracts/EASOnboarding.sol:EASOnboarding",
        "label": "attestationProfile",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(AttestationProfile)2331_storage)"
      },
      {
        "astId": 2364,
        "contract": "contracts/EASOnboarding.sol:EASOnboarding",
        "label": "studentEventMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(metaEvent)2346_storage))"
      },
      {
        "astId": 2369,
        "contract": "contracts/EASOnboarding.sol:EASOnboarding",
        "label": "events",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Event)2322_storage)"
      },
      {
        "astId": 2373,
        "contract": "contracts/EASOnboarding.sol:EASOnboarding",
        "label": "isMentor",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2376,
        "contract": "contracts/EASOnboarding.sol:EASOnboarding",
        "label": "eventIdCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(metaEvent)2346_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Structs.metaEvent))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(metaEvent)2346_storage)"
      },
      "t_mapping(t_address,t_struct(AttestationProfile)2331_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Structs.AttestationProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(AttestationProfile)2331_storage"
      },
      "t_mapping(t_uint256,t_struct(Event)2322_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Structs.Event)",
        "numberOfBytes": "32",
        "value": "t_struct(Event)2322_storage"
      },
      "t_mapping(t_uint256,t_struct(metaEvent)2346_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Structs.metaEvent)",
        "numberOfBytes": "32",
        "value": "t_struct(metaEvent)2346_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AttestationProfile)2331_storage": {
        "encoding": "inplace",
        "label": "struct Structs.AttestationProfile",
        "members": [
          {
            "astId": 2324,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "studentLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2327,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "eventsCompleted",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2330,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "attestations",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Event)2322_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Event",
        "members": [
          {
            "astId": 2298,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "typeOf",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2300,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "eventId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2302,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "level",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2304,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "closingTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2306,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "attendeeCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2308,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "eventName",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2310,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "eventDescription",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2312,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "mentorName",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 2314,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "mentorAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 2317,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "attendees",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2319,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "isActive",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 2321,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "overrideClosingTimestamp",
            "offset": 1,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(metaEvent)2346_storage": {
        "encoding": "inplace",
        "label": "struct Structs.metaEvent",
        "members": [
          {
            "astId": 2333,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "attestation",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2335,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "eventId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2337,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "level",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2339,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "eventName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2341,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "eventDescription",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2343,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "mentorName",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2345,
            "contract": "contracts/EASOnboarding.sol:EASOnboarding",
            "label": "mentorAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
